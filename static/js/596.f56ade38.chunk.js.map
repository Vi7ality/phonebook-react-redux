{"version":3,"file":"static/js/596.f56ade38.chunk.js","mappings":"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","sources":["redux/selectors.js","components/Contacts/Contacts.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/Phonebook/Phonebook.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.data;\n\nexport const selectFilterQuery = state => state.filterQuery;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectStatusFilter = state => state.filters.status;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterQuery],\n  (contacts, filterQuery) => {\n    const normalizedFilterQuery = filterQuery.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilterQuery)\n    );\n  }\n);\n","import { Button } from '@chakra-ui/button';\nimport { ListItem, Text, UnorderedList } from '@chakra-ui/layout';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { selectVisibleContacts } from 'redux/selectors';\n\n\nexport function Contacts() {\n  const dispatch = useDispatch();\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n      <UnorderedList px='15px' py='10px' spacing='8px'>\n        {visibleContacts.map(({ id, name, number }) => {\n          return (\n            <ListItem key={id} display='flex'>\n              <Text mr='5px'>{name}:</Text>\n              <Text mr='10px' href={`tel: ${number}`}>{number}</Text>\n              <Button size='sm'\n                type=\"button\"\n                onClick={() => {\n                  dispatch(deleteContact(id));\n                }}\n              >\n                Delete\n              </Button>\n            </ListItem>\n          );\n        })}\n      </UnorderedList>\n  );\n}\n","import { useState } from 'react';\n\n// import { Form, FormButton, FormInput, Label, LabelText } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport Notiflix from 'notiflix';\nimport { addContact } from 'redux/operations';\nimport {\n  FormControl,\n  FormLabel,\n} from '@chakra-ui/form-control';\nimport { Input } from '@chakra-ui/input';\nimport { Button } from '@chakra-ui/button';\nimport { VStack } from '@chakra-ui/layout';\n\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      Notiflix.Notify.failure(`${name} is already exist in your contacts`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <VStack spacing=\"10px\" alignItems=\"flex-start\">\n        <FormControl isRequired>\n          <FormLabel>Name</FormLabel>\n          <Input\n            size='md' \n            placeholder=\"John Doe\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n          \n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel>Number</FormLabel>\n          <Input\n            size='md'\n            placeholder=\"+380 67 111 1111\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n        </FormControl>\n        <Button type=\"submit\">Add contact</Button>\n      </VStack>\n    </form>\n  );\n}\n","import { FormControl, FormLabel } from '@chakra-ui/form-control';\nimport { Input } from '@chakra-ui/input';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectFilterQuery } from 'redux/selectors';\n\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilterQuery);\n\n  const filterChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n  return (\n    <FormControl>\n      <FormLabel>Find contacts by name</FormLabel>\n      <Input\n        placeholder='Type a name'\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        value={value}\n        onChange={filterChange}\n      />\n    </FormControl>\n  );\n}\n","import { Contacts } from 'components/Contacts/Contacts';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\nimport { Flex, Heading, Text, VStack } from '@chakra-ui/layout';\n\n\n function Phonebook() {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n   return (\n\n    <Flex justify='center'>\n \n      <VStack w='full' h='full' spacing='10px' px='15px' alignItems='flex-start'>\n        <Heading size='xl'>Phonebook</Heading>\n        <ContactForm></ContactForm>\n      </VStack>\n      <VStack bg='gray.50' w='full' h='full' spacing='10px' padding='10px' alignItems='flex-start'>\n        <Heading size='xl'>Contacts</Heading>\n        <Filter></Filter>\n        <Contacts></Contacts>\n        {isLoading && !error && <Text>Loading...</Text>}\n      </VStack>\n\n    </Flex>\n  );\n}\n\nexport default Phonebook;\n"],"names":["selectContacts","state","contacts","data","selectFilterQuery","filterQuery","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","normalizedFilterQuery","toLowerCase","filter","contact","name","includes","Contacts","dispatch","useDispatch","visibleContacts","useSelector","px","py","spacing","map","id","number","display","mr","href","size","type","onClick","deleteContact","ContactForm","useState","setName","setNumber","handleChange","event","currentTarget","value","reset","onSubmit","preventDefault","find","Notiflix","addContact","alignItems","isRequired","I","placeholder","pattern","title","required","onChange","Filter","setFilter","useEffect","fetchContacts","justify","w","h","bg","padding"],"sourceRoot":""}